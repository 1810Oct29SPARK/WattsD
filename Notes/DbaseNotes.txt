DataBase notes

Select [Column List] 
From [Table List]
Where [Condition]
Group [Column List] - returns distinct values
Having [Condition]-  must be used with group by
Order [Column List]


We want to filter out unneccesary information

Think : from 
(from which tables were pulling information)

where
(conditions on entries in those tables)

Select cave from bear
Agragate function flow to many entries and return a single value

having sets a condition on the root results

Having goes right after group by

What is the difference between Order by and Group by

What is the diffrence between Where and Having

Order by
returns the resulr set depending on your specifications

Select
Which column will show up after all the other operations run

Table list is a list of tables that you can pull information from
used for join, you can make them all into one result set

Joins
Used to query information from multiple tables

InterJoin

Incluse values present in both sides

Making joined table chains Muhahahaha

Left is an inner join

Right join is and outer join

Full join is a full outer join
Self join when a table is joined to itself. A table will reference itself

Cross Join
cartijan product of the two tables

Set operations
Union, Union all,
Intersect, Minus

For comparing result sets with the same number and type of columns 

insert adds a new item

minus will remove all the items that are not in a certain set

intersect will diplay only the duplicates

Sequence
Will generate sucessive values
Create or replace sequence [sequence name]
Start with
Increment by
Cache
Min value
Max value

Trigger
Block of code which automaticly executes with response to an event

DML
Insert/Update/Delete

Definew for triggers or after triggers

Create or replace a trigger [name]

For each row
Begin
---
End

union all will grab everything with dups and union produces everything without dupliucates

PLSQL
The return of logic

Provides more programability
Has things like use functions and storage procedures
Cursors and if statements and loops oh my
Allows for logic

Views 
Virtual table returned by a query
Reusable select statement
Create view [Name]
As [Select start]
No column list?


functions
Block of code we execute
0 or many params
return 1 value
Invoke with ()
oNLY 1 NO DML

storage procedures
Block of code we can execute
0 or many in and out params
We can give it names 
Set a list of parameters
is
Has many returns

Indexes
Applying an index to a column enforces a place in memorey where orderiung the vakues
Speed up searching, slim down insertion
Creates a backing index
Implicityly generated
implicity generated by DB supports constraints

Does not make sense to apply additional indexes to these parts

Create index on another level

Cursers''Context area

Oracle creates a context

Procesing a cursor is going to be a pointer to some sort of context area
Throws a retrn when checking exceoptio

We start with a 

Implicit cursor created whenever 
Declare it get the out put memorey and than
In order to initalize the memory some on
Fetch and close after

Declare the cursor uninitialized
Open Cusror allocates
Fetch Cursos retrieve data
Close release the memorey
Close

Sys ref cursor

Transaction
Unit of work done a db
may incoporate many DML statements

TCL
Transaction control language
Commit - save changes
Rollback - discard changes
Savepoint - a point to which you may roll back

Propeties of a Transaction

A- Atomicity
All operations execute succesful or non will be commited
C-Consistency
DB is in a valid state(acodding ot data model constraints after commit)
I- Isolation
After concurrent transactions have executed, DB state is same as if they had been sequenial
D-Durability
All commits are final cannot be rolled back

Isolation Protocol

Dirty Read
One tranaction views uncommited changes from another transaction
can invalidat sessions. When you are readin uncommited read

A non repeat read
you can't have a table running while another one is changing

Phantom Read
begin with a transaction and wuery some data
session 

Isolation levels

uncommited
Repeatable read

Lend
Commited

Repatable reap
Serializable

recommited is the default

JDBC

JAVA DATA BASE CONNECTION
THROWS US TO CONNECT TO A DATABASE

java.sql

SQL EXCEPTION

IMPORTANT CLASSES/INTERFACE
CONNECTION INTERFACE
USED TO ESTABLISH AND MANAGE A CONNECTION/ SESSION WITH A DB
EXECUTE SQL STATEMENT AND RETRIEVE RESULTS
RETIEVE INFO ABOUT DB AND STORED PRODUCES OTHER META DATA

STATEMENT INTERFACE
EXECUTE A STRING AS A SQL STATMENT
VERY VULNERABLE TO SQL INJECTION

PREPARED STATEMENT
PRECOMPILED STATEMENT

PREPARED STATEMENT P = CAN

CAN.PREPAREDSTATEMENT(SELECT*FROM BEAR WHERE CAVE ID = ?)
P.SETINT(1,3);
? IS A PLACE HOLDERINDEX

CALLABLE STATEMENTS
EXTENDS PREPARED STATEMENTS
ALLOWS US TO EXECUTE STORED PROCEDURES
USE THE IN AND OUT PARAMETERS AND DATATYPES
RETURN 1 OR MANY RESULTS

FUNCTIONS RETURN ONE VALUE
STORED PROCEDURES RETURN MANY

RESULT SET PROVIDES INFORMATION ABOUT A SET RESULT
TABLE OF DATA REPRESENTING THE RESULT OF SQL STATETMENT MAINTAINS A CURSOR POINTING TO CURRENT RUN 

OBTAINED FROM
DRIVER MANAGER

DRIVERMANAGER.GETCONNECTION

propertie
Through in your dependencies and properties from another folder

dependencies
dependency
group id com.oracle.ojdbc
artifactid ojdbc
version 12.1.0.1

update maven project
make a new package com revature util
make a new calss connectionutil

make a driver class com.rev.main

public class driver
main{
init();
}

static void init(){
try{
Connection con = ConnectionUtil.getConnection("connection.properties);
System.out.println(con);
catch(SQLException e){
e.printStackTrace();
catch(IOException e)
{
e.printStackTrace():
}

}

get imports for stuff
public connection util

in target make a text file
url = put your host name

//this is a bad way to do stuff
public static connection getconnection() throws sqlexception{
string url = "jdbc:oracle:thin:@put part your host name:1521:orcl";
String user = "dev";
String pass = "Bleakart9";
return DriverManager.getConnection(url,user,pass);
}

public static Connection getConnection(String filename) throws SQLException, IOException
{
Properties prop = new Propeties();
InputStream in = new FileInputStream(filename);
prop.load(in);
return DriverManager.getConnection(prop.getProperty("url"), prop.getProperty("username"), prop.getProperty("password"));
}

grab your host name and your user name for your rds

Dao
Data access object
decision pattern for organization code which interacts with a data source

Often Application use factory pattern to chose appropiate dao implementation

Dao encapsulation and abstracts data access logic behind an inteface

public class cava{

public cave{
private int id
private string name
private int maxbears
}
make getters and setters